{"version":3,"file":"static/js/104.1d5d018b.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","helpers/genre.js","helpers/normalization.js","services/API.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 15px;\n`;\n\nexport const List = styled.ul`\n  align-items: center;\n  flex-wrap: wrap;\n`;\nexport const Item = styled.li`\n  width: 100%;\n  height: 400px;\n  flex-basis: calc(100% / 4 - 15px);\n  padding: 5px;\n\n  & img {\n    width: 200px;\n    max-height: 300px;\n    object-fit: cover;\n  }\n`;\n\nexport const Data = styled.p`\n  margin-top: 10px;\n  font-size: 14px;\n  font-weight: 600;\n`;\n","import { Container, List, Item, Data } from './Cast.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { fetchMoviesCast } from '../../services/API';\nimport { getImgPath } from 'helpers/normalization';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const res = await fetchMoviesCast(Number(movieId));\n        // console.log(res);\n        setCast(res);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <Container>\n      {cast.length !== 0 ? (\n        <List>\n          {cast &&\n            cast.map(({ id, name, profile_path, character }) => {\n              const img = getImgPath(profile_path);\n              return (\n                <Item key={id}>\n                  <img src={img} alt={name} />\n                  <Data>{name}</Data>\n                  <Data>Character: {character} </Data>\n                </Item>\n              );\n            })}\n        </List>\n      ) : (\n        <Data>We have no information about the actors in that movie</Data>\n      )}\n    </Container>\n  );\n};\n\nexport default Cast;\n","const genre = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n\nexport default genre;\n","import genreList from './genre';\nimport noImg from '../img/noFound.png';\n\nconst genreArr = genre_id => genre_id.map(el => genreList[`${el}`]).join(', ');\nconst genreArrLib = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\nexport const normalizeMovies = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      name,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n    }) => ({\n      genre: genre_ids ? genreArr(genre_ids) : genreArrLib(genres),\n      id: id,\n      title: original_title ? original_title : name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizeMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: genreArrLib(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n","import axios from 'axios';\nimport {\n  normalizeMovies,\n  normalizeMoviesDetails,\n} from '../helpers/normalization';\n\nconst API_KEY = '32e5de1f8d1f8b349737f2ff256fe882';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  include_adult: false,\n  language: 'en-US',\n};\n\nexport const fetchPopularMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const fetchMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizeMoviesDetails(data);\n  return response;\n};\n\nexport const fetchMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizeMovies(data.results);\n  return response;\n};\n\nexport const fetchMoviesCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const fetchMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n"],"names":["Container","styled","List","Item","Data","useState","cast","setCast","movieId","useParams","useEffect","getCast","fetchMoviesCast","Number","res","console","log","message","length","map","id","name","profile_path","character","img","getImgPath","src","alt","genreArrLib","genres","el","join","imgPath","noImg","getDate","date","slice","normalizeMovies","movies","genre_id","genre_ids","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","genre","genreList","title","about","releaseDate","vote","votes","normalizeMoviesDetails","axios","api_key","include_adult","language","fetchPopularMovies","data","response","results","fetchMoviesById","fetchMoviesBySearch","query","fetchMoviesReviews"],"sourceRoot":""}